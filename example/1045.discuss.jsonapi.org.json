{
  "post_stream": {
    "posts": [
      {
        "id": 1045,
        "name": "Andre Helberg",
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "created_at": "2016-04-13T14:25:18.023Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/sazzer\">@Sazzer</a> I can’t imagine a situation where you would have so many links from a resource that it would become unmanageable.</p>\n<p>For your specific example, when you want to specify something like pagination links to specific pages you should use <a href=\"https://tools.ietf.org/html/rfc6570\" rel=\"nofollow noopener\">URL templates</a></p>",
        "post_number": 11,
        "post_type": 1,
        "updated_at": "2016-04-13T14:25:18.023Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "avg_time": 14,
        "incoming_link_count": 2,
        "reads": 15,
        "score": 18.7,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Andre Helberg",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://tools.ietf.org/html/rfc6570",
            "internal": false,
            "reflection": false,
            "title": "RFC 6570 - URI Template",
            "clicks": 11
          }
        ],
        "read": true,
        "user_title": null,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 252,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1046,
        "name": "Graham",
        "username": "Sazzer",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png",
        "created_at": "2016-04-13T14:43:34.171Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/a-helberg\">@A-Helberg</a> Ok - I’d not come across that before. Are they valid in JSON API Links?</p>\n<p>Take, for example, faceted searching. Your search results might want to specify a number of facets and values that you can filter on to restrict down what you are seeing. If you are providing a link for every single value of every single facet then this can get to be very big very quickly. If you instead simply provide the facets and values then the payload size is much smaller, and if the client knows how to then it can build the URLs from those input values. If using these URL Templates in JSONAPI is valid then this becomes possible to do.</p>",
        "post_number": 12,
        "post_type": 1,
        "updated_at": "2016-04-13T14:43:34.171Z",
        "reply_count": 1,
        "reply_to_post_number": 11,
        "quote_count": 0,
        "avg_time": 14,
        "incoming_link_count": 1,
        "reads": 14,
        "score": 13.5,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Graham",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "A-Helberg",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 259,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1047,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T14:50:28.351Z",
        "cooked": "<aside class=\"quote\" data-post=\"12\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/sazzer/40/262_1.png\" class=\"avatar\"> Sazzer:</div>\n<blockquote>\n<p>If using these URL Templates in JSONAPI is valid then this becomes possible to do.</p>\n</blockquote>\n</aside>\n<p>JSON API wants you to use a <a href=\"http://jsonapi.org/format/#fetching-filtering\"><code>filter</code> parameter</a> for this.</p>",
        "post_number": 13,
        "post_type": 1,
        "updated_at": "2016-04-13T14:50:28.351Z",
        "reply_count": 1,
        "reply_to_post_number": 12,
        "quote_count": 1,
        "avg_time": 17,
        "incoming_link_count": 1,
        "reads": 13,
        "score": 13.45,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "http://jsonapi.org/format/#fetching-filtering",
            "internal": false,
            "reflection": false,
            "title": "JSON API — Latest Specification (v1.0)",
            "clicks": 9
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "Sazzer",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1048,
        "name": "Graham",
        "username": "Sazzer",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png",
        "created_at": "2016-04-13T14:53:46.405Z",
        "cooked": "<p>Yes it does. But something has to provide a list of possibilities for these parameters. That will either be external documentation combined with some data from the payload, or a large number of links in the payload. (Or just external documentation when the possibilities aren’t dependant on the previous payload)</p>",
        "post_number": 14,
        "post_type": 1,
        "updated_at": "2016-04-13T14:53:46.405Z",
        "reply_count": 2,
        "reply_to_post_number": 13,
        "quote_count": 0,
        "avg_time": 27,
        "incoming_link_count": 0,
        "reads": 13,
        "score": 13.95,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Graham",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "jlangley",
          "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 259,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1050,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T14:54:31.325Z",
        "cooked": "<aside class=\"quote\" data-post=\"9\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>we don’t need links, as they become redundant.</p>\n</blockquote>\n</aside>\n<p>I disagree.<br>\nThe links say what you can do <strong>right now</strong>, i.e. based on the current state of resources held by the server. The client <strong>cannot</strong> know that <em>in advance</em>.<br>\nHowever, the client <em>can</em> be told in advance that when a certain action is available, the client must supply certain information (i.e. the POST / PATCH body) in order for the server to carry out the action.</p>",
        "post_number": 15,
        "post_type": 1,
        "updated_at": "2016-04-13T14:54:31.325Z",
        "reply_count": 1,
        "reply_to_post_number": 9,
        "quote_count": 1,
        "avg_time": 16,
        "incoming_link_count": 0,
        "reads": 13,
        "score": 8.4,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "A-Helberg",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1051,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T15:00:28.099Z",
        "cooked": "<aside class=\"quote\" data-post=\"14\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/sazzer/40/262_1.png\" class=\"avatar\"> Sazzer:</div>\n<blockquote>\n<p>But something has to provide a list of possibilities for these parameters.</p>\n</blockquote>\n</aside>\n<p>Well, a client <em>could</em> assume that it is entitled to <code>filter</code> on any of the resource’s <code>attribute</code>s (and then the server could return error responses for requests it does not support).</p>\n<p>But I agree that is pretty unfriendly to the client developer, so personally I <em>would</em> put a list of filterable attributes in the API documentation. As you suggest, providing links for every option and every combination of options could significantly bloat the server response, and probably would be hard for a client to parse and present sensibly back to the user.</p>\n<p>I can easily imagine different clients offering different subsets of filters appropriate to their particular users. That feels like a client design time consideration, rather than a runtime consideration, so fits with my current rule of thumb about how different aspects of the API get communicated.</p>",
        "post_number": 16,
        "post_type": 1,
        "updated_at": "2016-04-13T15:01:08.887Z",
        "reply_count": 2,
        "reply_to_post_number": 14,
        "quote_count": 1,
        "avg_time": 10,
        "incoming_link_count": 1,
        "reads": 14,
        "score": 18.3,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "Sazzer",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1052,
        "name": "Graham",
        "username": "Sazzer",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png",
        "created_at": "2016-04-13T15:04:50.744Z",
        "cooked": "<p>I have to confess, the more I think about it the more I’m starting to wonder against the idea of hyperlinks in the payloads that tell you what to do next. It works fantastically for simple cases, and it seems like a brilliant idea, but it starts to feel like it’s just making life harder for some situations where you end up breaking out of the resource payload anyway.</p>\n<p>And I know the big argument in favour of hyperlinks is that the server can do large-scale reorganisations and the client doesn’t need to know or care, because the new links provided will just work. But unfortunately it just doesn’t work that way in real life.</p>",
        "post_number": 17,
        "post_type": 1,
        "updated_at": "2016-04-13T15:04:50.744Z",
        "reply_count": 1,
        "reply_to_post_number": 16,
        "quote_count": 0,
        "avg_time": 9,
        "incoming_link_count": 0,
        "reads": 13,
        "score": 8.05,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Graham",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "jlangley",
          "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 259,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1054,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T15:40:58.402Z",
        "cooked": "<aside class=\"quote\" data-post=\"17\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/sazzer/40/262_1.png\" class=\"avatar\"> Sazzer:</div>\n<blockquote>\n<p>I’m starting to wonder against the idea of hyperlinks in the payloads that tell you what to do next.</p>\n</blockquote>\n</aside>\n<p>I disagree (as outlined above in reply to <a class=\"mention\" href=\"/u/a-helberg\">@A-Helberg</a>).<br>\nJust because we can’t use them for <em>everything</em>, that doesn’t mean we shouldn’t use them for <em>anything</em>.</p>",
        "post_number": 18,
        "post_type": 1,
        "updated_at": "2016-04-13T15:40:58.402Z",
        "reply_count": 1,
        "reply_to_post_number": 17,
        "quote_count": 1,
        "avg_time": 10,
        "incoming_link_count": 1,
        "reads": 10,
        "score": 12.5,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "Sazzer",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1056,
        "name": "Graham",
        "username": "Sazzer",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png",
        "created_at": "2016-04-13T16:08:47.849Z",
        "cooked": "<p>That’s true. I’m just a huge fan of consistency is all. It gets awkward using an API when some things work one way and other things work in a completely different way. If everything is the same then you know what you’re dealing with.</p>",
        "post_number": 19,
        "post_type": 1,
        "updated_at": "2016-04-13T16:08:47.849Z",
        "reply_count": 0,
        "reply_to_post_number": 18,
        "quote_count": 0,
        "avg_time": 7,
        "incoming_link_count": 0,
        "reads": 11,
        "score": 2.55,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Graham",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "jlangley",
          "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 259,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1057,
        "name": "Andre Helberg",
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "created_at": "2016-04-13T19:54:15.126Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/sazzer\">@Sazzer</a> as <a class=\"mention\" href=\"/u/jlangley\">@jlangley</a> said you would use a filter parameter for “faceted searching”. And I agree that having a link to each possible value for search value is not the way to go, and hence the reason for starting this thread, which I’ll explain in a bit.</p>\n<aside class=\"quote\" data-post=\"15\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://avatars.discourse.org/v2/letter/j/9e8a1a/40.png\" class=\"avatar\"> jlangley:</div>\n<blockquote>\n<p>The links say what you can do right now, i.e. based on the current state of resources held by the server. The client cannot know that in advance. However, the client can be told in advance that when a certain action is available, the client must supply certain information (i.e. the POST / PATCH body) in order for the server to carry out the action.</p>\n</blockquote>\n</aside>\n<p>You are right a client can know in advance when a certain action will be available, and the way you do that, is by making your client privy to business rules and logic. This is a very bad type of coupling and exactly the reason HATEOAS was introduced.</p>\n<aside class=\"quote\" data-post=\"16\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://avatars.discourse.org/v2/letter/j/9e8a1a/40.png\" class=\"avatar\"> jlangley:</div>\n<blockquote>\n<p>Well, a client could assume that it is entitled to filter on any of the resource’s attributes (and then the server could return error responses for requests it does not support).</p>\n</blockquote>\n</aside>\n<p>Correct but what about the case where the filter parater is not an attribute on the resource?</p>\n<aside class=\"quote\" data-post=\"16\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://avatars.discourse.org/v2/letter/j/9e8a1a/40.png\" class=\"avatar\"> jlangley:</div>\n<blockquote>\n<p>I would put a list of filterable attributes in the API documentation</p>\n</blockquote>\n</aside>\n<p>And any of a multitude of API updates would, invalidate your client.<br>\nConsider the case, mentioned above, where a client only cares about a certain filterable attribute, the only breaking change I can think of right now, is a name change. If the client was able to get the filterable parameters from the API. The absence of the parameter it cares about, means it’s no longer available and the client and degrade gracefully.</p>",
        "post_number": 20,
        "post_type": 1,
        "updated_at": "2016-04-13T19:54:15.126Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 2,
        "avg_time": 9,
        "incoming_link_count": 0,
        "reads": 12,
        "score": 7.85,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Andre Helberg",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 252,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1058,
        "name": "Andre Helberg",
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "created_at": "2016-04-13T20:02:57.727Z",
        "cooked": "<aside class=\"quote\" data-post=\"14\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/sazzer/40/262_1.png\" class=\"avatar\"> Sazzer:</div>\n<blockquote>\n<p>Yes it does. But something has to provide a list of possibilities for these parameters</p>\n</blockquote>\n</aside>\n<p>This quote is the crux, of why I want to get some discussion around this thread’s topic.</p>\n<blockquote>\n<p>The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.<br>\n…<br>\nIf the Request-URI is not an asterisk, the OPTIONS request applies only to the options that are available when communicating with that resource.<br>\n…<br>\nThe response body, if any, SHOULD also include information about the communication options</p>\n</blockquote>\n<p>The problem we are trying to solve, is getting our available “communication options”, from the server. This is exactly what the <code>OPTIONS</code> method tries to solve.</p>\n<p><code>OPTIONS</code> requests may include a body, and we can use this body to get exactly the type of “options” we care about a particular point in time. The <code>OPTIONS</code> body would include, all allowed methods, the attributes and relationships for the resource, and all query parameters.</p>\n<p>In my opinion such a response should include validation information, for each of the attributes, such that the client can reasonably validate the content it is sending to the server, without making a round trip. This would be validations for length and for example format.</p>",
        "post_number": 21,
        "post_type": 1,
        "updated_at": "2016-04-13T20:02:57.727Z",
        "reply_count": 2,
        "reply_to_post_number": null,
        "quote_count": 1,
        "avg_time": 11,
        "incoming_link_count": 1,
        "reads": 12,
        "score": 17.95,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Andre Helberg",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 252,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1059,
        "name": "Andre Helberg",
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "created_at": "2016-04-13T20:07:12.905Z",
        "cooked": "<p>As an aside, my motivation for HATEOAS as a driving princaple in API design, is as follows.</p>\n<p>Consider a regular website, that supports user registration. As a first pass the site requires, <code>username</code> and <code>password</code>, when you submit the form, you are registered. Later in the application’s life, we change the form to be: <code>email</code> and <code>password</code>. And later on we add extra fields, and we can do whatever!</p>\n<p>None of this requires you to update your browser (the client), because the the server’s response is self contained. The client can always infer what actions it should take, by following links, or submitting forms.</p>",
        "post_number": 22,
        "post_type": 1,
        "updated_at": "2016-04-13T20:07:12.905Z",
        "reply_count": 2,
        "reply_to_post_number": 21,
        "quote_count": 0,
        "avg_time": 11,
        "incoming_link_count": 0,
        "reads": 11,
        "score": 12.75,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Andre Helberg",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "A-Helberg",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 252,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1060,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T22:34:05.990Z",
        "cooked": "<aside class=\"quote\" data-post=\"20\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>Correct but what about the case where the filter parater is not an attribute on the resource?</p>\n</blockquote>\n</aside>\n<p>You’re thinking of filtering on related resources then I presume? There <em>might</em> be a good case for that, but I suspect you would be better served by doing either of the following:</p>\n<ol>\n<li>\n<p>Use a different representation model</p>\n</li>\n<li>\n<p>Use a different technical solution (e.g. <a href=\"https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html\" rel=\"nofollow noopener\">GraphQL</a>)</p>\n</li>\n</ol>\n<aside class=\"quote\" data-post=\"20\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>And any of a multitude of API updates would, invalidate your client.</p>\n</blockquote>\n</aside>\n<p>Not <em>that</em> many - you would need to remove or rename a previously allowed filter to break clients, adding a new filter wouldn’t be a breaking change.</p>\n<aside class=\"quote\" data-post=\"20\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>If the client was able to get the filterable parameters from the API. The absence of the parameter it cares about, means it’s no longer available and the client and degrade gracefully.</p>\n</blockquote>\n</aside>\n<p>Where a query parameter or <code>attribute</code> element is only allowed to have a restricted set of values (e.g. an enum, where a client might typically use a drop-down selector) I <em>do</em> like to have the API provide (via related resources) the list of allowed values rather than just put this in the API documentation (this way even removing an allowed value doesn’t break the client <img src=\"https://discourse-cdn-sjc1.com/business6/images/emoji/twitter/slight_smile.png?v=5\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\">). But currently I don’t believe this approach applies generally to <code>filter</code>s though, due to the potential explosion of combinations when an API allows multiple <code>filter</code>s.</p>",
        "post_number": 23,
        "post_type": 1,
        "updated_at": "2016-04-13T22:34:05.990Z",
        "reply_count": 0,
        "reply_to_post_number": 20,
        "quote_count": 1,
        "avg_time": 9,
        "incoming_link_count": 1,
        "reads": 12,
        "score": 7.85,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html",
            "internal": false,
            "reflection": false,
            "title": "GraphQL Introduction | React",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "A-Helberg",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1061,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T22:40:09.638Z",
        "cooked": "<aside class=\"quote\" data-post=\"21\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>The problem we are trying to solve, is getting our available “communication options”, from the server. This is exactly what the OPTIONS method tries to solve.</p>\n</blockquote>\n</aside>\n<p>I don’t think you need <code>OPTIONS</code> to do this though. Couldn’t you just use related resources (as per the IANA <a href=\"http://www.iana.org/assignments/link-relations/link-relations.xhtml\" rel=\"nofollow noopener\">create-form and edit-form</a> approach?</p>\n<aside class=\"quote\" data-post=\"21\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>the client can reasonably validate the content it is sending to the server, without making a round trip. This would be validations for length and for example format.</p>\n</blockquote>\n</aside>\n<p>You’re still going to have to validate that data on the server anyway though. I can see that doing client-side validation <em>might</em> be attractive if the network is slow / not reliable, but I suspect you would have just as many problems downloading the validation information before submission as you would retrying after the server rejects the submission.</p>",
        "post_number": 24,
        "post_type": 1,
        "updated_at": "2016-04-13T22:40:09.638Z",
        "reply_count": 1,
        "reply_to_post_number": 21,
        "quote_count": 1,
        "avg_time": 7,
        "incoming_link_count": 0,
        "reads": 10,
        "score": 7.35,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "http://www.iana.org/assignments/link-relations/link-relations.xhtml",
            "internal": false,
            "reflection": false,
            "title": "Link Relations",
            "clicks": 5
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "A-Helberg",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1062,
        "name": "Andre Helberg",
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "created_at": "2016-04-13T22:51:57.619Z",
        "cooked": "<p><a class=\"mention\" href=\"/u/jlangley\">@jlangley</a> Agreed, I originally looked at the create and edit form links. And this is another solution. But this requires adding a new top-level key in jsonapi, that would represent something analogous to a form, which I am not opposed to, and similar work will be needed for responses to an OPTIONS request, but…</p>\n<p>My idea behind using OPTIONS, is that they can be conceptually separated from other requests/responses. If you make anything other than an OPTIONS request, you can safely assume your getting a resource back, and not a specification for a resource.</p>\n<p>This would also be a non breaking change to the spec, ie. a jsonapi 1.0 implementation would still work exactly the same with a 1.x version that supports OPTIONS</p>\n<p>With regards to round trip for validation, definitely it is possible that this does not improve roundtrip, but this is not the goal. Currently you can get a list of errors back, but those errors are only human readable, and a client can’t really do much with them. I believe having some basic data validation, will improve a client’s user experience A great deal</p>",
        "post_number": 25,
        "post_type": 1,
        "updated_at": "2016-04-13T22:54:55.644Z",
        "reply_count": 1,
        "reply_to_post_number": 24,
        "quote_count": 0,
        "avg_time": 5,
        "incoming_link_count": 0,
        "reads": 10,
        "score": 7.25,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Andre Helberg",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "jlangley",
          "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 252,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1063,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T22:54:47.141Z",
        "cooked": "<aside class=\"quote\" data-post=\"22\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>None of this requires you to update your browser (the client)</p>\n</blockquote>\n</aside>\n<p>In a (transactional) “regular website” the browser <strong>isn’t</strong> the <em>client</em> - the <em>V</em> in the MVC / MVVM web framework running on the server is the <em>client</em> for the API (and that <strong>will</strong> need updating to cater for the changes you describe). The browser is just rendering the UI (HTML) generated by the client, and the UI <strong>hasn’t</strong> had a breaking change because changing the API hasn’t caused the semantics of HTML to change.</p>\n<p>This doesn’t mean that hypermedia and HATEOAS have no value, but rather that we should recognise that they aren’t “silver bullets” either.</p>",
        "post_number": 26,
        "post_type": 1,
        "updated_at": "2016-04-13T22:54:47.141Z",
        "reply_count": 1,
        "reply_to_post_number": 22,
        "quote_count": 1,
        "avg_time": 3,
        "incoming_link_count": 0,
        "reads": 12,
        "score": 7.55,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "A-Helberg",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1064,
        "name": "Andre Helberg",
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "created_at": "2016-04-13T22:59:34.195Z",
        "cooked": "<aside class=\"quote\" data-post=\"22\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>None of this requires you to update your browser (the client)</p>\n</blockquote>\n</aside>\n<p>I wasn’t implying anything about API’s here, sorry for the confusion. I meant client, in the case of client-server applications.</p>",
        "post_number": 27,
        "post_type": 1,
        "updated_at": "2016-04-13T22:59:34.195Z",
        "reply_count": 0,
        "reply_to_post_number": 26,
        "quote_count": 1,
        "avg_time": 4,
        "incoming_link_count": 0,
        "reads": 11,
        "score": 2.4,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Andre Helberg",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "jlangley",
          "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 252,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 1065,
        "name": "",
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "created_at": "2016-04-13T23:09:13.586Z",
        "cooked": "<aside class=\"quote\" data-post=\"25\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>But this requires adding a new top-level key in jsonapi</p>\n</blockquote>\n</aside>\n<p>No need for that - you can just define the forms under <code>relationships</code>.</p>\n<aside class=\"quote\" data-post=\"25\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>My idea behind using OPTIONS, is that they can be conceptually separated from other requests/responses. If you make anything other than an OPTIONS request, you can safely assume your getting a resource back, and not a specification for a resource.</p>\n</blockquote>\n</aside>\n<p>That’s a nice distinction and I quite like that as an idea. I’m still not sold on the idea that this meta information is best provided at runtime though; and even if it is, should we be using directly in-band data to convey this, or should we link to somewhere else (e.g. API documentation <img src=\"https://discourse-cdn-sjc1.com/business6/images/emoji/twitter/wink.png?v=5\" title=\":wink:\" class=\"emoji\" alt=\":wink:\">) where this can be found?</p>\n<aside class=\"quote\" data-post=\"25\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>Currently you can get a list of errors back, but those errors are only human readable</p>\n</blockquote>\n</aside>\n<p>I disagree. Another reason why I chose JSON API was the <a href=\"http://jsonapi.org/format/#error-objects\">structured error information</a> it provides.</p>\n<aside class=\"quote\" data-post=\"25\" data-topic=\"407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt width=\"20\" height=\"20\" src=\"https://discourse-cdn-sjc1.com/business6/user_avatar/discuss.jsonapi.org/a-helberg/40/250_1.png\" class=\"avatar\"> A-Helberg:</div>\n<blockquote>\n<p>I believe having some basic data validation, will improve a client’s user experience A great deal</p>\n</blockquote>\n</aside>\n<p>Perhaps this would be more valuable where you expect to have a high proportion of novice users (e.g. a public facing API), and so you might expect the server to respond with a high proportion of rejections. The things I’m working on right now will only be available internally / to selected partners so this is less of a worry for me.</p>",
        "post_number": 28,
        "post_type": 1,
        "updated_at": "2016-04-13T23:09:13.586Z",
        "reply_count": 0,
        "reply_to_post_number": 25,
        "quote_count": 1,
        "avg_time": 14,
        "incoming_link_count": 9,
        "reads": 12,
        "score": 48.1,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "http://jsonapi.org/format/#error-objects",
            "internal": false,
            "reflection": false,
            "title": "JSON API — Latest Specification (v1.0)",
            "clicks": 2
          }
        ],
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "A-Helberg",
          "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 251,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 2786,
        "name": "Alan Crosswell",
        "username": "n2ygk",
        "avatar_template": "https://avatars.discourse.org/v2/letter/n/50afbb/{size}.png",
        "created_at": "2018-03-26T15:47:20.859Z",
        "cooked": "<p>I’m wondering if it’s time to revisit this idea now that <a href=\"https://www.openapis.org/\" rel=\"nofollow noopener\">OAS 3.0</a> is out there and it seems to be where the world of API modeling and documentation is converging. Unlike Swagger 2.0, OAS 3.0 is able to represent jsonapi thanks to <a href=\"https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/\" rel=\"nofollow noopener\">addition of some missing json-schema constructs</a>.</p>\n<p>I’ve been working a bit with django-restframework-json-api and it seems the <a href=\"http://www.django-rest-framework.org/api-guide/metadata/\" rel=\"nofollow noopener\">DRF OPTIONS metadata</a> would be a good place to plug this in as a proof of concept.</p>",
        "post_number": 29,
        "post_type": 1,
        "updated_at": "2018-03-26T15:47:20.859Z",
        "reply_count": 1,
        "reply_to_post_number": null,
        "quote_count": 0,
        "avg_time": 220,
        "incoming_link_count": 0,
        "reads": 4,
        "score": 16.8,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Alan Crosswell",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "link_counts": [
          {
            "url": "https://www.openapis.org/",
            "internal": false,
            "reflection": false,
            "title": "Home - OpenAPI Initiative",
            "clicks": 1
          },
          {
            "url": "http://www.django-rest-framework.org/api-guide/metadata/",
            "internal": false,
            "reflection": false,
            "title": "Metadata - Django REST framework",
            "clicks": 1
          },
          {
            "url": "https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/",
            "internal": false,
            "reflection": false,
            "title": "A Visual Guide to What's New in Swagger 3.0",
            "clicks": 1
          }
        ],
        "read": true,
        "user_title": null,
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 563,
        "hidden": false,
        "trust_level": 1,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      },
      {
        "id": 2787,
        "name": "Andre Helberg",
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "created_at": "2018-03-27T06:05:35.616Z",
        "cooked": "<p>I still think this is a marvellous idea. Back when I started this thread I was hoping to get some community feedback on what a proper setup would be, but I have since realised, you don’t need it (the feedback I mean).</p>\n<p>If you are working on a proof of concept congratulations <img src=\"https://discourse-cdn-sjc1.com/business6/images/emoji/twitter/tada.png?v=5\" title=\":tada:\" class=\"emoji\" alt=\":tada:\"><br>\nYou now have an amazing project to give a talk about (at almost any tech conference since APIs are language agnostic)</p>\n<p>If you write a blog post to share what you’ve done, please link it, I’d love to read it!</p>\n<p>Some hidden benefits of this include:<br>\nAutomatic rendering of resource “forms”<br>\nOTA(over the air) updates of resources without the need to update clients<br>\nClient side validation + single source of truth for these validations</p>",
        "post_number": 30,
        "post_type": 1,
        "updated_at": "2018-03-27T06:05:35.616Z",
        "reply_count": 0,
        "reply_to_post_number": 29,
        "quote_count": 0,
        "avg_time": 165,
        "incoming_link_count": 0,
        "reads": 3,
        "score": 8.85,
        "yours": false,
        "topic_id": 407,
        "topic_slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
        "display_username": "Andre Helberg",
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_bg_color": null,
        "primary_group_flair_color": null,
        "version": 1,
        "can_edit": false,
        "can_delete": false,
        "can_recover": false,
        "can_wiki": false,
        "read": true,
        "user_title": null,
        "reply_to_user": {
          "username": "n2ygk",
          "avatar_template": "https://avatars.discourse.org/v2/letter/n/50afbb/{size}.png"
        },
        "actions_summary": [],
        "moderator": false,
        "admin": false,
        "staff": false,
        "user_id": 252,
        "hidden": false,
        "trust_level": 2,
        "deleted_at": null,
        "user_deleted": false,
        "edit_reason": null,
        "can_view_edit_history": true,
        "wiki": false,
        "can_accept_answer": false,
        "can_unaccept_answer": false,
        "accepted_answer": false
      }
    ],
    "stream": [
      939,
      1006,
      1018,
      1020,
      1033,
      1035,
      1039,
      1042,
      1043,
      1044,
      1045,
      1046,
      1047,
      1048,
      1050,
      1051,
      1052,
      1054,
      1056,
      1057,
      1058,
      1059,
      1060,
      1061,
      1062,
      1063,
      1064,
      1065,
      2786,
      2787
    ]
  },
  "timeline_lookup": [
    [
      1,
      868
    ],
    [
      2,
      854
    ],
    [
      3,
      853
    ],
    [
      7,
      852
    ],
    [
      10,
      851
    ],
    [
      29,
      139
    ]
  ],
  "suggested_topics": [
    {
      "id": 1158,
      "title": "Relationships within abstract relationship",
      "fancy_title": "Relationships within abstract relationship",
      "slug": "relationships-within-abstract-relationship",
      "posts_count": 14,
      "reply_count": 6,
      "highest_post_number": 14,
      "image_url": null,
      "created_at": "2017-11-20T23:01:24.465Z",
      "last_posted_at": "2018-03-15T05:04:58.419Z",
      "bumped": true,
      "bumped_at": "2018-03-15T05:04:58.419Z",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "archetype": "regular",
      "like_count": 2,
      "views": 1106,
      "category_id": 1,
      "featured_link": null,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 513,
            "username": "a-komarev",
            "avatar_template": "/user_avatar/discuss.jsonapi.org/a-komarev/{size}/440_1.png"
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 415,
            "username": "michaelhibay",
            "avatar_template": "/user_avatar/discuss.jsonapi.org/michaelhibay/{size}/405_1.png"
          }
        }
      ]
    },
    {
      "id": 1164,
      "title": "Complex Nested Arrays",
      "fancy_title": "Complex Nested Arrays",
      "slug": "complex-nested-arrays",
      "posts_count": 1,
      "reply_count": 0,
      "highest_post_number": 1,
      "image_url": null,
      "created_at": "2017-12-05T18:40:58.012Z",
      "last_posted_at": "2017-12-05T18:40:58.106Z",
      "bumped": true,
      "bumped_at": "2017-12-06T20:47:19.587Z",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "archetype": "regular",
      "like_count": 0,
      "views": 532,
      "category_id": 1,
      "featured_link": null,
      "posters": [
        {
          "extras": "latest single",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 581,
            "username": "Wesley",
            "avatar_template": "https://avatars.discourse.org/v2/letter/w/eb9ed0/{size}.png"
          }
        }
      ]
    },
    {
      "id": 1193,
      "title": "Is it allowed to have an attribute called \"links\" inside \"attributes\"?",
      "fancy_title": "Is it allowed to have an attribute called &ldquo;links&rdquo; inside &ldquo;attributes&rdquo;?",
      "slug": "is-it-allowed-to-have-an-attribute-called-links-inside-attributes",
      "posts_count": 3,
      "reply_count": 1,
      "highest_post_number": 3,
      "image_url": null,
      "created_at": "2018-01-25T16:59:15.093Z",
      "last_posted_at": "2018-01-25T17:42:40.319Z",
      "bumped": true,
      "bumped_at": "2018-01-25T17:42:40.319Z",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "archetype": "regular",
      "like_count": 0,
      "views": 378,
      "category_id": 1,
      "featured_link": null,
      "posters": [
        {
          "extras": "latest",
          "description": "Original Poster, Most Recent Poster",
          "user": {
            "id": 341,
            "username": "Buju",
            "avatar_template": "/user_avatar/discuss.jsonapi.org/buju/{size}/321_1.png"
          }
        },
        {
          "extras": null,
          "description": "Frequent Poster",
          "user": {
            "id": 15,
            "username": "dgeb",
            "avatar_template": "/user_avatar/discuss.jsonapi.org/dgeb/{size}/17_1.png"
          }
        }
      ]
    },
    {
      "id": 1194,
      "title": "Auth Header Question",
      "fancy_title": "Auth Header Question",
      "slug": "auth-header-question",
      "posts_count": 2,
      "reply_count": 0,
      "highest_post_number": 2,
      "image_url": null,
      "created_at": "2018-01-30T19:32:48.514Z",
      "last_posted_at": "2018-01-31T05:48:56.600Z",
      "bumped": true,
      "bumped_at": "2018-01-31T05:48:56.600Z",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "archetype": "regular",
      "like_count": 0,
      "views": 373,
      "category_id": 1,
      "featured_link": null,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 581,
            "username": "Wesley",
            "avatar_template": "https://avatars.discourse.org/v2/letter/w/eb9ed0/{size}.png"
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 415,
            "username": "michaelhibay",
            "avatar_template": "/user_avatar/discuss.jsonapi.org/michaelhibay/{size}/405_1.png"
          }
        }
      ]
    },
    {
      "id": 1137,
      "title": "303 response on POSTing resource without conflicts",
      "fancy_title": "303 response on POSTing resource without conflicts",
      "slug": "303-response-on-posting-resource-without-conflicts",
      "posts_count": 8,
      "reply_count": 3,
      "highest_post_number": 8,
      "image_url": null,
      "created_at": "2017-10-23T01:07:28.611Z",
      "last_posted_at": "2017-10-26T13:29:35.909Z",
      "bumped": true,
      "bumped_at": "2017-10-26T13:29:35.909Z",
      "unseen": false,
      "pinned": false,
      "unpinned": null,
      "visible": true,
      "closed": false,
      "archived": false,
      "bookmarked": null,
      "liked": null,
      "archetype": "regular",
      "like_count": 0,
      "views": 773,
      "category_id": 1,
      "featured_link": null,
      "posters": [
        {
          "extras": null,
          "description": "Original Poster",
          "user": {
            "id": 513,
            "username": "a-komarev",
            "avatar_template": "/user_avatar/discuss.jsonapi.org/a-komarev/{size}/440_1.png"
          }
        },
        {
          "extras": "latest",
          "description": "Most Recent Poster",
          "user": {
            "id": 415,
            "username": "michaelhibay",
            "avatar_template": "/user_avatar/discuss.jsonapi.org/michaelhibay/{size}/405_1.png"
          }
        }
      ]
    }
  ],
  "id": 407,
  "title": "[RFC] Standardising an OPTIONS response on a server that supports jsonapi",
  "fancy_title": "[RFC] Standardising an OPTIONS response on a server that supports jsonapi",
  "posts_count": 30,
  "created_at": "2016-03-28T07:43:44.543Z",
  "views": 3393,
  "reply_count": 23,
  "like_count": 0,
  "last_posted_at": "2018-03-27T06:05:35.616Z",
  "visible": true,
  "closed": false,
  "archived": false,
  "has_summary": false,
  "archetype": "regular",
  "slug": "rfc-standardising-an-options-response-on-a-server-that-supports-jsonapi",
  "category_id": 1,
  "word_count": 3807,
  "deleted_at": null,
  "user_id": 252,
  "featured_link": null,
  "pinned_globally": false,
  "pinned_at": null,
  "pinned_until": null,
  "draft": null,
  "draft_key": "topic_407",
  "draft_sequence": null,
  "unpinned": null,
  "pinned": false,
  "details": {
    "created_by": {
      "id": 252,
      "username": "A-Helberg",
      "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
    },
    "last_poster": {
      "id": 252,
      "username": "A-Helberg",
      "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png"
    },
    "participants": [
      {
        "id": 252,
        "username": "A-Helberg",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/a-helberg/{size}/250_1.png",
        "post_count": 12,
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_color": null,
        "primary_group_flair_bg_color": null
      },
      {
        "id": 251,
        "username": "jlangley",
        "avatar_template": "https://avatars.discourse.org/v2/letter/j/9e8a1a/{size}.png",
        "post_count": 11,
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_color": null,
        "primary_group_flair_bg_color": null
      },
      {
        "id": 259,
        "username": "Sazzer",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/sazzer/{size}/262_1.png",
        "post_count": 5,
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_color": null,
        "primary_group_flair_bg_color": null
      },
      {
        "id": 49,
        "username": "lukasoppermann",
        "avatar_template": "/user_avatar/discuss.jsonapi.org/lukasoppermann/{size}/178_1.png",
        "post_count": 1,
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_color": null,
        "primary_group_flair_bg_color": null
      },
      {
        "id": 563,
        "username": "n2ygk",
        "avatar_template": "https://avatars.discourse.org/v2/letter/n/50afbb/{size}.png",
        "post_count": 1,
        "primary_group_name": null,
        "primary_group_flair_url": null,
        "primary_group_flair_color": null,
        "primary_group_flair_bg_color": null
      }
    ],
    "links": [
      {
        "url": "https://tools.ietf.org/html/rfc6570",
        "title": "RFC 6570 - URI Template",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 11,
        "user_id": 252,
        "domain": "tools.ietf.org",
        "root_domain": "ietf.org"
      },
      {
        "url": "http://jsonapi.org/format/#fetching-filtering",
        "title": "JSON API — Latest Specification (v1.0)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 9,
        "user_id": 251,
        "domain": "jsonapi.org",
        "root_domain": "jsonapi.org"
      },
      {
        "url": "http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven",
        "title": "REST APIs must be hypertext-driven » Untangled",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 8,
        "user_id": 252,
        "domain": "roy.gbiv.com",
        "root_domain": "gbiv.com"
      },
      {
        "url": "http://www.iana.org/assignments/link-relations/link-relations.xhtml",
        "title": "Link Relations",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 5,
        "user_id": 251,
        "domain": "www.iana.org",
        "root_domain": "iana.org"
      },
      {
        "url": "https://github.com/apiaryio/dredd",
        "title": "GitHub - apiaryio/dredd: Language-agnostic HTTP API Testing Framework",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 251,
        "domain": "github.com",
        "root_domain": "github.com"
      },
      {
        "url": "http://jsonapi.org/format/#error-objects",
        "title": "JSON API — Latest Specification (v1.0)",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 251,
        "domain": "jsonapi.org",
        "root_domain": "jsonapi.org"
      },
      {
        "url": "https://www.ietf.org/rfc/rfc2616.txt",
        "title": null,
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 2,
        "user_id": 252,
        "domain": "www.ietf.org",
        "root_domain": "ietf.org"
      },
      {
        "url": "https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/",
        "title": "A Visual Guide to What's New in Swagger 3.0",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 563,
        "domain": "blog.readme.io",
        "root_domain": "readme.io"
      },
      {
        "url": "https://www.openapis.org/",
        "title": "Home - OpenAPI Initiative",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 563,
        "domain": "www.openapis.org",
        "root_domain": "openapis.org"
      },
      {
        "url": "http://www.django-rest-framework.org/api-guide/metadata/",
        "title": "Metadata - Django REST framework",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 563,
        "domain": "www.django-rest-framework.org",
        "root_domain": "django-rest-framework.org"
      },
      {
        "url": "https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html",
        "title": "GraphQL Introduction | React",
        "internal": false,
        "attachment": false,
        "reflection": false,
        "clicks": 1,
        "user_id": 251,
        "domain": "facebook.github.io",
        "root_domain": "facebook.github.io"
      }
    ],
    "notification_level": 1,
    "can_flag_topic": false
  },
  "current_post_number": 24,
  "highest_post_number": 30,
  "deleted_by": null,
  "actions_summary": [
    {
      "id": 4,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 8,
      "count": 0,
      "hidden": false,
      "can_act": false
    },
    {
      "id": 7,
      "count": 0,
      "hidden": false,
      "can_act": false
    }
  ],
  "chunk_size": 20,
  "bookmarked": null,
  "topic_timer": null,
  "message_bus_last_id": 0,
  "participant_count": 5,
  "can_vote": false,
  "vote_count": null,
  "user_voted": false
}
